[{"C:\\Users\\malyn\\WebstormProjects\\Course_project\\client\\src\\index.js":"1","C:\\Users\\malyn\\WebstormProjects\\Course_project\\client\\src\\App.js":"2","C:\\Users\\malyn\\WebstormProjects\\Course_project\\client\\src\\components\\AppRouter.js":"3","C:\\Users\\malyn\\WebstormProjects\\Course_project\\client\\src\\components\\Main page.js":"4","C:\\Users\\malyn\\WebstormProjects\\Course_project\\client\\src\\components\\Admin.js":"5","C:\\Users\\malyn\\WebstormProjects\\Course_project\\client\\src\\components\\User.js":"6","C:\\Users\\malyn\\WebstormProjects\\Course_project\\client\\src\\components\\Task.js":"7","C:\\Users\\malyn\\WebstormProjects\\Course_project\\client\\src\\components\\CreateUpdateTask.js":"8","C:\\Users\\malyn\\WebstormProjects\\Course_project\\client\\src\\components\\Solutions.js":"9","C:\\Users\\malyn\\WebstormProjects\\Course_project\\client\\src\\components\\AlertSolution.js":"10"},{"size":177,"mtime":1632330000276,"results":"11","hashOfConfig":"12"},{"size":436,"mtime":1633341742947,"results":"13","hashOfConfig":"12"},{"size":1218,"mtime":1633192391651,"results":"14","hashOfConfig":"12"},{"size":162,"mtime":1632420960752,"results":"15","hashOfConfig":"12"},{"size":879,"mtime":1633203762416,"results":"16","hashOfConfig":"12"},{"size":2722,"mtime":1633203868796,"results":"17","hashOfConfig":"12"},{"size":2905,"mtime":1633380959993,"results":"18","hashOfConfig":"12"},{"size":4171,"mtime":1633374332868,"results":"19","hashOfConfig":"12"},{"size":2958,"mtime":1633375120107,"results":"20","hashOfConfig":"12"},{"size":328,"mtime":1633379946183,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"17eg8l8",{"filePath":"25","messages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"27","messages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"29","messages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"31","messages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"33","messages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"24"},{"filePath":"36","messages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"38","messages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"24"},{"filePath":"41","messages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"24"},{"filePath":"44","messages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\malyn\\WebstormProjects\\Course_project\\client\\src\\index.js",[],["46","47"],"C:\\Users\\malyn\\WebstormProjects\\Course_project\\client\\src\\App.js",[],"C:\\Users\\malyn\\WebstormProjects\\Course_project\\client\\src\\components\\AppRouter.js",[],"C:\\Users\\malyn\\WebstormProjects\\Course_project\\client\\src\\components\\Main page.js",[],"C:\\Users\\malyn\\WebstormProjects\\Course_project\\client\\src\\components\\Admin.js",[],"C:\\Users\\malyn\\WebstormProjects\\Course_project\\client\\src\\components\\User.js",["48"],"import React, {useEffect, useState} from 'react';\r\nimport {useHistory, useParams} from \"react-router-dom\";\r\nimport Axios from 'axios';\r\nimport BootstrapTable from 'react-bootstrap-table-next';\r\nimport filterFactory, {textFilter} from 'react-bootstrap-table2-filter';\r\nimport {Card, Button} from \"react-bootstrap\";\r\n\r\nconst User = () => {\r\n    let {id} = useParams();\r\n    let history = useHistory();\r\n    const [user, setUser] = useState({});\r\n    const [userTasks, setUserTasks] = useState([]);\r\n    const [selectedId, setSelectedId] = useState(0);\r\n\r\n    const columns = [{\r\n        dataField: 'id',\r\n        text: 'Task number'\r\n    }, {\r\n        dataField: 'name',\r\n        text: 'Task name',\r\n        sort: true,\r\n        filter: textFilter()\r\n    }, {\r\n        dataField: 'topic',\r\n        text: 'Task topic',\r\n        sort: true,\r\n        filter: textFilter()\r\n    }, {\r\n        formatter: (cellContent, row) => {\r\n            return <Button variant=\"info\" onClick={() => openTask(row.id)}>Open task</Button>\r\n        }\r\n    }];\r\n\r\n    const selectRow = {\r\n        mode: 'checkbox',\r\n        clickToSelect: true,\r\n        onSelect: (row, isSelect, rowIndex, e) => {\r\n            if (isSelect) {\r\n                setSelectedId(row.id);\r\n            } else {\r\n                setSelectedId([]);\r\n            }\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        Axios.get(`/api/users/${id}`).then(response => {\r\n            setUser(response.data);\r\n            setUserTasks(response.data.tasks)\r\n        })\r\n    }, [])\r\n\r\n    function openTask(taskId) {\r\n        history.push(`/user/${id}/openTask/${taskId}`)\r\n    }\r\n\r\n    function addTask() {\r\n        history.push(`/user/${id}/createUpdate`);\r\n    }\r\n\r\n    async function deleteTask() {\r\n        await Axios.delete(`/api/tasks/${selectedId}`).then(\r\n            setUserTasks(userTasks.filter(user => user.id !== selectedId))\r\n        )\r\n    }\r\n\r\n    function updateTask() {\r\n        history.push(`/user/${id}/createUpdate/${selectedId}`)\r\n    }\r\n\r\n    return (\r\n        <div className=\"userInfo\">\r\n            <BootstrapTable bootstrap4={true} keyField='id' data={userTasks} columns={columns}\r\n                            filter={filterFactory()} selectRow={selectRow}/>\r\n            <Button style={{margin: \"15px\"}} variant=\"primary\" onClick={addTask}>Add task</Button>\r\n            <Button style={{margin: \"15px\"}} variant=\"danger\" onClick={deleteTask}>Delete task</Button>\r\n            <Button style={{margin: \"15px\"}} variant=\"warning\" onClick={updateTask}>Update task</Button>\r\n            <Card body>Solved tasks: {user.solvedTasks}</Card>\r\n            <Card body>Created tasks: {user.createdTasks}</Card>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default User;","C:\\Users\\malyn\\WebstormProjects\\Course_project\\client\\src\\components\\Task.js",["49","50"],"C:\\Users\\malyn\\WebstormProjects\\Course_project\\client\\src\\components\\CreateUpdateTask.js",["51","52"],"import React, {useEffect, useState} from 'react';\r\nimport {Form, Button, Container, Col} from \"react-bootstrap\";\r\nimport Axios from \"axios\";\r\nimport {useHistory, useParams} from \"react-router-dom\";\r\nimport Solutions from \"./Solutions\";\r\n\r\nconst CreateUpdateTask = () => {\r\n    const {id, taskId} = useParams();\r\n    let history = useHistory();\r\n    const [taskName, setTaskName] = useState(\"\");\r\n    const [taskTopic, setTaskTopic] = useState(\"\");\r\n    const [solutions, setSolutions] = useState(\"\");\r\n    const [solutionsToUpdate, setSolutionsToUpdate] = useState(\"\");\r\n    const [taskNameToUpdate, setTaskNameToUpdate] = useState(\"\");\r\n    const [taskTopicToUpdate, setTaskTopicToUpdate] = useState(\"\");\r\n\r\n    async function createTask() {\r\n        const newTask = {name: taskName, topic: taskTopic, solutions: solutions, userId: id}\r\n        await Axios.post(\"/api/tasks\", newTask).then(\r\n            history.push(`/user/${id}`)\r\n        );\r\n    }\r\n\r\n    function isUpdating() {\r\n        if (taskId > 0) {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    async function updateTask() {\r\n        const taskToUpdate = {name: taskNameToUpdate, topic: taskTopicToUpdate, solutions: solutionsToUpdate}\r\n        await Axios.put(`/api/tasks/${taskId}`, taskToUpdate).then(\r\n            history.push(`/user/${id}`)\r\n        );\r\n    }\r\n\r\n    function getSolutionsCreate(data) {\r\n        setSolutions(data);\r\n    }\r\n\r\n    function getSolutionsUpdate(data) {\r\n        setSolutionsToUpdate(data);\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (isUpdating() === true) {\r\n            Axios.get(`/api/tasks/${taskId}`).then(response => {\r\n                    setTaskNameToUpdate(response.data.name);\r\n                    setTaskTopicToUpdate(response.data.topic);\r\n                    setSolutionsToUpdate(response.data.solutions);\r\n                }\r\n            );\r\n        }\r\n    }, [])\r\n\r\n    return (\r\n        <Form>\r\n            <Container>\r\n                <Form.Group className=\"mb-3\">\r\n                    <Form.Label>Task name</Form.Label>\r\n                    <Form.Control defaultValue={isUpdating() === true ? taskNameToUpdate : \"\"} onChange={(e) => {\r\n                        if (isUpdating() === true) {\r\n                            setTaskNameToUpdate(e.target.value);\r\n                        }\r\n                        setTaskName(e.target.value)\r\n                    }} type=\"text\" placeholder=\"Enter task name\"/>\r\n                </Form.Group>\r\n                <Form.Group className=\"mb-3\">\r\n                    <Form.Label>Task topic</Form.Label>\r\n                    <Form.Control as=\"select\"\r\n                                  onChange={(e) => {\r\n                                      if (isUpdating() === true) {\r\n                                          setTaskTopicToUpdate(e.target.value);\r\n                                      }\r\n                                      setTaskTopic(e.target.value);\r\n                                  }} type=\"text\">\r\n                        <option value=\"\">Select task topic</option>\r\n                        <option value=\"Geometry\">Geometry</option>\r\n                        <option value=\"Number theory\">Number theory</option>\r\n                        <option value=\"Java\">Java</option>\r\n                        <option value=\"Java Script\">Java Script</option>\r\n                    </Form.Control>\r\n                </Form.Group>\r\n                <Solutions solutionsCreate={(data) => getSolutionsCreate(data)}\r\n                           solutionForUpdate={solutionsToUpdate} solutionsUpdate={(data) => getSolutionsUpdate(data)}\r\n                           isUpdate={isUpdating()}/>\r\n                <Button onClick={isUpdating() === true ? updateTask : createTask} variant=\"primary\" type=\"submit\">\r\n                    Submit\r\n                </Button>\r\n                <Button style={{margin: \"30px\"}} onClick={() => {\r\n                    history.push(`/user/${id}`);\r\n                }} variant=\"secondary\" type=\"submit\">\r\n                    Cancel\r\n                </Button>\r\n            </Container>\r\n        </Form>\r\n    );\r\n};\r\n\r\nexport default CreateUpdateTask;","C:\\Users\\malyn\\WebstormProjects\\Course_project\\client\\src\\components\\Solutions.js",["53"],"import React, {useEffect, useState} from 'react';\r\nimport {Col, Form} from \"react-bootstrap\";\r\n\r\nconst Solutions = (props) => {\r\n    const [solution1, setSolution1] = useState(\"\");\r\n    const [solution2, setSolution2] = useState(\"\");\r\n    const [solution3, setSolution3] = useState(\"\");\r\n    const [solution1ForUpdate, setSolution1ForUpdate] = useState(\"\");\r\n    const [solution2ForUpdate, setSolution2ForUpdate] = useState(\"\");\r\n    const [solution3ForUpdate, setSolution3ForUpdate] = useState(\"\");\r\n\r\n    useEffect(() => {\r\n        if (props.isUpdate === true) {\r\n            let str = [solution1ForUpdate, solution2ForUpdate, solution3ForUpdate]\r\n            props.solutionsUpdate(str.join(\" \"));\r\n        } else {\r\n            let strings = [solution1, solution2, solution3]\r\n            props.solutionsCreate(strings.join(\" \"));\r\n        }\r\n    }, [solution1, solution2, solution3])\r\n\r\n    return (\r\n        <div>\r\n            <Form.Group className=\"mb-3\">\r\n                <Form.Label>\r\n                    Solution 1\r\n                </Form.Label>\r\n                <Col>\r\n                    <Form.Control\r\n                        defaultValue={props.solutionForUpdate ? props.solutionForUpdate.split(' ')[0] : \"\"}\r\n                        placeholder=\"Enter solution 1\" onChange={(e) => {\r\n                        if (props.isUpdate === true) {\r\n                            setSolution1ForUpdate(e.target.value);\r\n                        }\r\n                        setSolution1(e.target.value);\r\n                    }}/>\r\n                </Col>\r\n            </Form.Group>\r\n            <Form.Group className=\"mb-3\">\r\n                <Form.Label>\r\n                    Solution 2\r\n                </Form.Label>\r\n                <Col>\r\n                    <Form.Control\r\n                        defaultValue={props.solutionForUpdate ? props.solutionForUpdate.split(' ')[1] : \"\"}\r\n                        placeholder=\"Enter solution 2\" onChange={(e) => {\r\n                        if (props.isUpdate === true) {\r\n                            setSolution2ForUpdate(e.target.value);\r\n                        }\r\n                        setSolution2(e.target.value);\r\n                    }}/>\r\n                </Col>\r\n            </Form.Group>\r\n            <Form.Group className=\"mb-3\">\r\n                <Form.Label>\r\n                    Solution 3\r\n                </Form.Label>\r\n                <Col>\r\n                    <Form.Control\r\n                        defaultValue={props.solutionForUpdate ? props.solutionForUpdate.split(' ')[2] : \"\"}\r\n                        placeholder=\"Enter solution 3\" onChange={(e) => {\r\n                        if (props.isUpdate === true) {\r\n                            setSolution3ForUpdate(e.target.value);\r\n                        }\r\n                        setSolution3(e.target.value);\r\n                    }}/>\r\n                </Col>\r\n            </Form.Group>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Solutions;","C:\\Users\\malyn\\WebstormProjects\\Course_project\\client\\src\\components\\AlertSolution.js",[],{"ruleId":"54","replacedBy":"55"},{"ruleId":"56","replacedBy":"57"},{"ruleId":"58","severity":1,"message":"59","line":51,"column":8,"nodeType":"60","endLine":51,"endColumn":10,"suggestions":"61"},{"ruleId":"62","severity":1,"message":"63","line":8,"column":12,"nodeType":"64","messageId":"65","endLine":8,"endColumn":14},{"ruleId":"58","severity":1,"message":"66","line":18,"column":8,"nodeType":"60","endLine":18,"endColumn":10,"suggestions":"67"},{"ruleId":"62","severity":1,"message":"68","line":2,"column":34,"nodeType":"64","messageId":"65","endLine":2,"endColumn":37},{"ruleId":"58","severity":1,"message":"69","line":56,"column":8,"nodeType":"60","endLine":56,"endColumn":10,"suggestions":"70"},{"ruleId":"58","severity":1,"message":"71","line":20,"column":8,"nodeType":"60","endLine":20,"endColumn":41,"suggestions":"72"},"no-native-reassign",["73"],"no-negated-in-lhs",["74"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'id'. Either include it or remove the dependency array.","ArrayExpression",["75"],"no-unused-vars","'id' is assigned a value but never used.","Identifier","unusedVar","React Hook useEffect has a missing dependency: 'taskId'. Either include it or remove the dependency array.",["76"],"'Col' is defined but never used.","React Hook useEffect has missing dependencies: 'isUpdating' and 'taskId'. Either include them or remove the dependency array.",["77"],"React Hook useEffect has missing dependencies: 'props', 'solution1ForUpdate', 'solution2ForUpdate', and 'solution3ForUpdate'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["78"],"no-global-assign","no-unsafe-negation",{"desc":"79","fix":"80"},{"desc":"81","fix":"82"},{"desc":"83","fix":"84"},{"desc":"85","fix":"86"},"Update the dependencies array to be: [id]",{"range":"87","text":"88"},"Update the dependencies array to be: [taskId]",{"range":"89","text":"90"},"Update the dependencies array to be: [isUpdating, taskId]",{"range":"91","text":"92"},"Update the dependencies array to be: [props, solution1, solution1ForUpdate, solution2, solution2ForUpdate, solution3, solution3ForUpdate]",{"range":"93","text":"94"},[1521,1523],"[id]",[636,638],"[taskId]",[1919,1921],"[isUpdating, taskId]",[853,886],"[props, solution1, solution1ForUpdate, solution2, solution2ForUpdate, solution3, solution3ForUpdate]"]